swagger: "2.0"
info:
  description: |
    This is the TAUS DQF API server.

    For this sample, you can use the api key `special-key` to test the authorization filters
  version: "1.1.0"
  title: TAUS DQF
  termsOfService: https://www.taus.net/taus-terms-of-use
  contact:
    name: dqf-api@taus.net
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: dqf.taus.net
basePath: /api/v1
schemes:
  - https
paths:
  /projects:
    post:
      tags:
        - project
      summary: Add a new project to the DQF tools
      description: ""
      operationId: addProject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Project object that needs to be added to the DQF tools
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "405":
          description: Invalid input
      security:
        - dqf_auth:
          - write_projects
          - read_projects
    put:
      tags:
        - project
      summary: Update an existing project
      description: ""
      operationId: updateProject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Project object that needs to be added to the DQF tools
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Project not found
        "400":
          description: Invalid ID supplied
      security:
        - dqf_auth:
          - write_projects
          - read_projects
  /projects/findByStatus:
    get:
      tags:
        - project
      summary: Finds Projects by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findProjectsByStatus
      produces:
        - application/json
      parameters:
        - in: query
          name: status
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
        "400":
          description: Invalid status value
      security:
        - dqf_auth:
          - write_projects
          - read_projects
  /projects/{projectId}:
    get:
      tags:
        - project
      summary: Find project by ID
      description: Returns a project when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: ID of project that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Project not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: Invalid ID supplied
      security:
        - api_key: []
        - dqf_auth:
          - write_projects
          - read_projects
    post:
      tags:
        - project
      summary: Updates a project in the DQF tools with form data
      description: ""
      operationId: updateProjectWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: ID of project that needs to be updated
          required: true
          type: string
        - in: formData
          name: name
          description: Updated name of the project
          required: true
          type: string
        - in: formData
          name: status
          description: Updated status of the project
          required: true
          type: string
      responses:
        "405":
          description: Invalid input
      security:
        - dqf_auth:
          - write_projects
          - read_projects
    delete:
      tags:
        - project
      summary: Deletes a project
      description: ""
      operationId: deleteProject
      produces:
        - application/json
      parameters:
        - in: header
          name: api_key
          description: ""
          required: true
          type: string
        - in: path
          name: projectId
          description: Project id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid project value
      security:
        - dqf_auth:
          - write_projects
          - read_projects
  /tasks:
    post:
      tags:
        - task
      summary: View a task of a project
      description: ""
      operationId: viewTask
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: request to view a task
          required: false
          schema:
            $ref: "#/definitions/Task"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Invalid Task
  /task/{taskId}:
    get:
      tags:
        - task
      summary: Find task by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getTaskById
      produces:
        - application/json
      parameters:
        - in: path
          name: taskId
          description: ID of pet that needs to be fetched
          required: true
          type: string
      responses:
        "404":
          description: Task not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - task
      summary: Delete task order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      produces:
        - application/json
      parameters:
        - in: path
          name: taskId
          description: ID of the task that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: Task not found
        "400":
          description: Invalid ID supplied
  /document:
      post:
        tags:
          - document
        summary: Add a new document to a DQF tools project
        description: ""
        operationId: addDocument
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - in: body
            name: body
            description: Document object that needs to be added to the DQF tools
            required: true
            schema:
              $ref: "#/definitions/Document"
        responses:
          "405":
            description: Invalid input
        security:
          - dqf_auth:
            - write_projects
            - read_projects  
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: false
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: false
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: false
          type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid user supplied
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid username supplied
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
  dqf_auth:
    type: oauth2
    authorizationUrl: http://dqf.taus.net/api/oauth/dialog
    flow: implicit
    scopes:
      write_projects: modify projects in your account
      read_projects: read your projects
definitions:
  ProjectType:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Project:
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      ProjectType:
        $ref: "#/definitions/ProjectType"
      name:
        type: string
        example: DQF Productivity test
      quality level:
        type: string
      sourcelanguage:
        type: string
        example: English
      targetlanguage:
        type: string
        example: Dutch
      company:
        type: string
        example: Dutch
      contentType: 
        type: string
        example: Dutch
      industry:
        type: string
        example: Dutch
      technology:
        type: string
        example: Dutch
      mtengine:
        type: string
        example: Dutch
      toolname:
        type: string
        example: Dutch
      versionnmr:
        type: string
        example: Dutch
      projectmanager name:
        type: string
        example: Dutch
      translatorsnames:
        type: string
        example: Dutch
      translatorsemails:
        type: string
        example: Dutch
      creationtime:
        type: string
        example: Dutch
      projectusesTM:
        type: string
        example: Dutch
      projectusesglossary:
        type: string
        example: Dutch
      process:
        type: string
        example: Dutch
      segmentorigin:        
        type: string
        example: Dutch       
      status:
        type: string
        description: project status in the DQF tools
  Task:
    properties:
      id:
        type: integer
        format: int64
      projectId:
        type: integer
        format: int64
      source segment:
        type: string
        example: DQF Productivity test
      target segments:
        type: string
        example: DQF Productivity test
      time:
        type: string
        example: 200
  User:
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
  Document:
    properties:
      id:
        type: integer
        format: int64
      projectId:
        type: integer
        format: int64
      name:
        type: string
        example: NL-EN translation.csv